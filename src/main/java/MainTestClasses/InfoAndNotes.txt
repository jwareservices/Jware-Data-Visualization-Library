
Specific properties you should always restore if modified: (because they can do Bad Things and have Unexpected Consequences):

Transform - because modifications to this will stack on top of each other and get very, very hard to reset. Beware: this is modified 
    by the translate, shear, scale, rotate, and transform methods of Graphics2D. Modifying transforms should be used with CAUTION.
 
Stroke -- because (at least in my configuration), leaving this default runs much faster than any setting even if equivalent to default. 
    Don't ask -- it's a result of the Java2D graphics pipelines accelerating the default case using graphics hardware.

Clip: will result in weird bugs where only part of the screen draws.

Composite: most operations probably don't expect this to be something weird.

Properties to not worry about:

RenderingHints. These are things you can easy set and restore, and generally you want to leave them set a certain way 
 (antialiasing on, etc) for the whole time the app is running. Changing RenderingHints will rarely break rendering of components, 
 although it might make it uglier.
 
Background color and paint color. Most things will modify these before drawing anyway.

Font: likewise.

Looping over a list and updating, three techniques.

List someList
 
Traditional:
            for (int i = 0; i < someList.size(); i++) {
		someList.get(i).update();
            }
For-loop:
            for (List someList1 : someList) {
                someList1.update();
            }

Lamba forEach:
            someList.stream().forEach((someList1) -> {
                someList1.update();
            });
            
		
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>



https://maven.apache.org/pom.html

https://netbeans.org/projects/versioncontrol/pages/Git_ui#Setup_%28Config_Files%29


import java.util.Stack;

AbstractGraphicsHandler {

  private Graphics2D grafPort;

  private final Stack<Graphics2D> grafPortState = new Stack<>();

  protected Graphics2D getGraphPort() {
    return grafPort;
  }

  protected void setGraphPort(final Graphics2D graphPort) {
    this.graphPort = graphPort;
  }

  protected Stack<Graphcs2D> getGrafPortState() {
    return grafPortState;
  }

  ...
  protected createCurrentGraphicState() {
     return new GraphicsState(getGraphPort().getBackground(), getGraphPort().getColor(), getGraphPort().getFont());
  }

  public void pushState() {
    getGrafPortState.push(createCurrentGraphicState());
  }

  public void popState() {
    setGraphPort(getGrafPortState().pop());
  }

  ...
}

UI Component 	Description
Blue Badge (Blue badge) 	Indicates the presence of files that have been modified, added or deleted in your working tree. For packages, this badge applies only to the package itself and not its subpackages. For projects or folders, the badge indicates changes within that item, or any of the contained subfolders.
Red Badge (Red badge) 	Marks projects, folders or packages that contain conflicting files. For packages, this badge applies only to the package itself and not its subpackages. For projects or folders, the badge indicates conflicts within that item, or any of the contained subfolders.

Color coding is applied to file names in order to indicate their current status against the repository:
Color                           Example 	Description
No specific color (black) 	Black text 	Indicates that the file has no changes.
Blue                            Blue text 	Indicates that the file has been locally modified.
Green                           Green text 	Indicates that the file has been locally added.
Red                             Red text 	Indicates that the file is in a merge conflict.
Gray                            Gray text 	Indicates that the file is ignored by Git and will not be included in versioning commands (e.g. Update and Commit). Files cannot be ignored if they are versioned.

File Status Labels

The IDE displays two status values for a file:

    A status describing differences between the files Working Tree and Index state,
    A status describing differences between the files Index state and current HEAD commit.

File status labels provide a textual indication of the status of versioned files in the IDE's windows:
Status Label 	Meaning
-               Unmodified
A               Added
U               Updated but unmerged
M               Modified
D               Deleted
I               Ignored
R               Renamed